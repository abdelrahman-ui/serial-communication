
I2C_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f4  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e5  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b9  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Read_Data>:
{
	TWAR=Slave_addr;
}
unsigned char I2C_Read_Data()
{
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  6c:	84 ec       	ldi	r24, 0xC4	; 196
  6e:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWINT))==0);
  70:	06 b6       	in	r0, 0x36	; 54
  72:	07 fe       	sbrs	r0, 7
  74:	fd cf       	rjmp	.-6      	; 0x70 <I2C_Read_Data+0x4>
	while((TWCR&(0xf8))!=0x80);
  76:	86 b7       	in	r24, 0x36	; 54
  78:	88 7f       	andi	r24, 0xF8	; 248
  7a:	80 38       	cpi	r24, 0x80	; 128
  7c:	e1 f7       	brne	.-8      	; 0x76 <I2C_Read_Data+0xa>
}   
  7e:	08 95       	ret

00000080 <main>:
int main(void)
{
	DDRD|=(1<<LED_0)|(1<<LED_1)|(1<<LED_2);
  80:	81 b3       	in	r24, 0x11	; 17
  82:	87 60       	ori	r24, 0x07	; 7
  84:	81 bb       	out	0x11, r24	; 17
#define  LED_1  1
#define  LED_2  2

void I2C_init(unsigned char Slave_addr)
{
	TWAR=Slave_addr;
  86:	80 e2       	ldi	r24, 0x20	; 32
  88:	82 b9       	out	0x02, r24	; 2
	I2C_init(0x20);
    /* Replace with your application code */
    while (1) 
	
    {
		 unsigned char stutes=I2C_Read_Data();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Read_Data>
		 switch(stutes)
  8e:	82 34       	cpi	r24, 0x42	; 66
  90:	79 f0       	breq	.+30     	; 0xb0 <main+0x30>
  92:	83 34       	cpi	r24, 0x43	; 67
  94:	c1 f0       	breq	.+48     	; 0xc6 <main+0x46>
  96:	81 34       	cpi	r24, 0x41	; 65
  98:	c1 f7       	brne	.-16     	; 0x8a <main+0xa>
		 {
			 case 'A':
				PORTD|=(1<<LED_0);
  9a:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	83 ed       	ldi	r24, 0xD3	; 211
  a0:	90 e3       	ldi	r25, 0x30	; 48
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
  ae:	ed cf       	rjmp	.-38     	; 0x8a <main+0xa>
				_delay_ms(1000);
				break;
			case 'B':
				PORTD|=(1<<LED_1);
  b0:	91 9a       	sbi	0x12, 1	; 18
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x38>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x42>
  c2:	00 00       	nop
  c4:	e2 cf       	rjmp	.-60     	; 0x8a <main+0xa>
				_delay_ms(1000);
				break;	
			case 'C':
				PORTD|=(1<<LED_2);
  c6:	92 9a       	sbi	0x12, 2	; 18
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
  da:	d7 cf       	rjmp	.-82     	; 0x8a <main+0xa>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
