
SPI_Master_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f9  00000000  00000000  00000867  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a3  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007a  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_spi>:
}

 void init_spi()
 {
	 //Dirication 
	DDRB|=(1<<MOSI)|(1<<SCK);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6a       	ori	r24, 0xA0	; 160
  70:	87 bb       	out	0x17, r24	; 23
	//which i control 
	DDRC|=(1<<LED)|(1<<CS);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	85 60       	ori	r24, 0x05	; 5
  76:	84 bb       	out	0x14, r24	; 20
	//speed , mode ,work ass Master ,DATA ORDER (MSB)
	SPCR|=(1<<SPE)|(1<<SPR0)|(1<<MSTR)	;
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	81 65       	ori	r24, 0x51	; 81
  7c:	8d b9       	out	0x0d, r24	; 13
  7e:	08 95       	ret

00000080 <spi_transfar>:
 }
 unsigned char spi_transfar(unsigned char send_byte)
 {
	 
	 // from mean take data and but it at data reg
	 SPDR=send_byte;
  80:	8f b9       	out	0x0f, r24	; 15
	 while(!(SPSR&(1<<SPIF)));
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <spi_transfar+0x2>
	 return SPDR;
  86:	8f b1       	in	r24, 0x0f	; 15
  88:	08 95       	ret

0000008a <main>:
void init_spi();
unsigned char spi_transfar(unsigned char send_byte);

int main(void)
{
   init_spi();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <init_spi>
		 		unsigned char recv_byte= spi_transfar(0XAA); // b3at data
				 ss_Disable();
				 _delay_ms(1000);
				 if (recv_byte==0x55)
				 {
					 PORTC^=(1<<LED);
  8e:	c4 e0       	ldi	r28, 0x04	; 4
int main(void)
{
   init_spi();
    while (1) 
    {
	      	ss_Enable();
  90:	a8 98       	cbi	0x15, 0	; 21
		 		unsigned char recv_byte= spi_transfar(0XAA); // b3at data
  92:	8a ea       	ldi	r24, 0xAA	; 170
  94:	0e 94 40 00 	call	0x80	; 0x80 <spi_transfar>
				 ss_Disable();
  98:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	33 ed       	ldi	r19, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x16>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x20>
  aa:	00 00       	nop
				 _delay_ms(1000);
				 if (recv_byte==0x55)
  ac:	85 35       	cpi	r24, 0x55	; 85
  ae:	81 f7       	brne	.-32     	; 0x90 <main+0x6>
				 {
					 PORTC^=(1<<LED);
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	8c 27       	eor	r24, r28
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	33 ed       	ldi	r19, 0xD3	; 211
  ba:	80 e3       	ldi	r24, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x32>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x3c>
  c6:	00 00       	nop
  c8:	e3 cf       	rjmp	.-58     	; 0x90 <main+0x6>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
