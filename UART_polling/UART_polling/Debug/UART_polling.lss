
UART_polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000000ec  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000651  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c0  00000000  00000000  00000881  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c2  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  7a:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
unsigned char UART_Recive()
{
	//return When Recive Is complet
	while(!(UCSRA&(1<<RXC)));
	return UDR;
}
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
  86:	53 9a       	sbi	0x0a, 3	; 10
  88:	54 9a       	sbi	0x0a, 4	; 10
  8a:	80 b5       	in	r24, 0x20	; 32
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	80 bd       	out	0x20, r24	; 32
  90:	80 b5       	in	r24, 0x20	; 32
  92:	80 63       	ori	r24, 0x30	; 48
  94:	80 bd       	out	0x20, r24	; 32
  96:	80 b5       	in	r24, 0x20	; 32
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	80 bd       	out	0x20, r24	; 32
  9c:	08 95       	ret

0000009e <UART_Send>:
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <UART_Send>
  a2:	8c b1       	in	r24, 0x0c	; 12
  a4:	08 95       	ret

000000a6 <UART_Send_String>:

void UART_Send_String(char *str)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(str[i]!='\0')
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	59 f0       	breq	.+22     	; 0xca <UART_Send_String+0x24>
  b4:	8f 01       	movw	r16, r30
  b6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_Send(str[i]); 
  b8:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_Send>
		i++;
  bc:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_Send_String(char *str)
{
	unsigned char i=0;
	while(str[i]!='\0')
  be:	f8 01       	movw	r30, r16
  c0:	ec 0f       	add	r30, r28
  c2:	f1 1d       	adc	r31, r1
  c4:	80 81       	ld	r24, Z
  c6:	81 11       	cpse	r24, r1
  c8:	f7 cf       	rjmp	.-18     	; 0xb8 <UART_Send_String+0x12>
	{
		UART_Send(str[i]); 
		i++;
	}
  ca:	cf 91       	pop	r28
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	08 95       	ret

000000d2 <main>:
unsigned char UART_Recive();
void UART_Send_String(char *str);

int main(void)
{
	UART_init();
  d2:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
	 
	UART_Send_String("Hallo from mcr ");
  d6:	80 e6       	ldi	r24, 0x60	; 96
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Send_String>
    while (1) 
    {
		UART_Send_String("Hallo from mcr \r\n");
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Send_String>
  e6:	fb cf       	rjmp	.-10     	; 0xde <main+0xc>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
